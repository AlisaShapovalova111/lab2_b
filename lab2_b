#include <Windows.h>
#include <vector>

const int WIDTH = 800;
const int HEIGHT = 600;

class Shape {
public:
    virtual void draw(HDC hdc) = 0;
};

class Circle : public Shape {
public:
    Circle(int x, int y, int r) : m_x(x), m_y(y), m_r(r) {}

    void draw(HDC hdc) override {
        Ellipse(hdc, m_x - m_r, m_y - m_r, m_x + m_r, m_y + m_r);
    }

private:
    int m_x, m_y, m_r;
};

class Rectangle : public Shape {
public:
    Rectangle(int x1, int y1, int x2, int y2) : m_x1(x1), m_y1(y1), m_x2(x2), m_y2(y2) {}

    void draw(HDC hdc) override {
        Rectangle(hdc, m_x1, m_y1, m_x2, m_y2);
    }

private:
    int m_x1, m_y1, m_x2, m_y2;
};

std::vector<Shape*> shapes;

LRESULT CALLBACK WndProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam)
{
    switch (msg)
    {
    case WM_PAINT:
    {
        HDC hdc;
        PAINTSTRUCT ps;
        hdc = BeginPaint(hWnd, &ps);

        for (auto shape : shapes) {
            shape->draw(hdc);
        }

        EndPaint(hWnd, &ps);
    }
    break;
    case WM_CREATE:
    {
        Circle* circle = new Circle(100, 100, 50);
        Rectangle* rectangle = new Rectangle(400, 200, 600, 400);

        shapes.push_back(circle);
        shapes.push_back(rectangle);
    }
    break;
    case WM_DESTROY:
        PostQuitMessage(0);
        return 0;
    default:
        return DefWindowProc(hWnd, msg, wParam, lParam);
    }

    return 0;
}

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance,
    LPSTR lpCmdLine, int nCmdShow)
{
    const char CLASS_NAME[] = "Sample Window Class";

    WNDCLASS wc = {};

    wc.lpfnWndProc = WndProc;
    wc.hInstance = hInstance;
    wc.lpszClassName = CLASS_NAME;

    RegisterClass(&wc);

    HWND hWnd = CreateWindowEx(
        0,                              // Optional window styles.
        CLASS_NAME,                     // Window class
        "Learn to Program Windows",     // Window title
        WS_OVERLAPPEDWINDOW,            // Window style

        // Size and position
        CW_USEDEFAULT, CW_USEDEFAULT, WIDTH, HEIGHT,

        NULL,       // Parent window    
        NULL,       // Menu
        hInstance,  // Instance handle
        NULL        // Additional application data
    );

    if (hWnd == NULL)
    {
        return 0;
    }

    ShowWindow(hWnd, nCmdShow);

    MSG msg = {};

    while (GetMessage(&msg, NULL, 0, 0))
    {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }

    return 0;
}
